# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui03.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QWidget, QLabel

from db import DB
from text import LoadText


class Ui_Form(QWidget):
    label = None

    def __init__(self, text):
        super().__init__()
        self.setWindowTitle("单行文本阅读器")
        self.setObjectName("Form")
        self.resize(1300, 46)
        self.setWindowOpacity(0.3)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        self.text = text

        self.setupUi()

    def setupUi(self):
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.setPalette(palette)

        self.line()

        # self.retranslateUi()
        # QtCore.QMetaObject.connectSlotsByName()

    def line(self):
        self.lineEdit = QtWidgets.QLineEdit(self)
        self.lineEdit.setGeometry(QtCore.QRect(0, -1, 691, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(39, 40, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(116, 114, 102, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(116, 114, 102))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(39, 40, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(116, 114, 102, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.lineEdit.setPalette(palette)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.resize(2000, 46)

        # 设置字体
        font = QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setText("你好啊 世界")

        self.label = Label(self.lineEdit, self.text)
        self.label.grabKeyboard()  # 控件开始捕获键盘

        self.setMouseTracking(False)  # 设置鼠标移动跟踪是否有效

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "单行文本阅读器"))

    def wheelEvent(self, event):
        angle = event.angleDelta() / 8  # 返回QPoint对象，为滚轮转过的数值，单位为1/8度
        angleX = angle.x()  # 水平滚过的距离(此处用不上)
        angleY = angle.y()  # 竖直滚过的距离
        if angleY > 0:
            self.label.loadText(True)
            # print("鼠标滚轮上滚")  # 响应测试语句
        else:  # 滚轮下滚
            self.label.loadText(False)
            # print("鼠标滚轮下滚")  # 响应测试语句


class Label(QLabel):
    # 检测键盘回车按键
    def __init__(self, parent, text):
        super(Label, self).__init__()
        self.parent = parent
        self.text = text

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Up or event.key() == Qt.Key_W:
            self.loadText(True)

        if event.key() == Qt.Key_Down or event.key() == Qt.Key_S:
            self.loadText(False)

    '''重载一下鼠标按下事件(单击)'''

    def mousePressEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:  # 左键按下
            self.loadText(True)
            print("单击鼠标左键")  # 响应测试语句
        elif event.buttons() == QtCore.Qt.RightButton:  # 右键按下
            self.loadText(False)
            print("单击鼠标右键")  # 响应测试语句

    def loadText(self, isUp):

        load_text = LoadText()
        dir = self.text
        text_name = os.path.basename(dir)
        db = DB()
        sql = "select * from file_line where filename='{}'".format(text_name)
        res = db.query(sql).first()
        import time
        time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        if not res:
            sql = "insert into file_line(filename,chapter,line, `time`) values('{0}', {1}, {2}, '{3}')".format(
                text_name, 0, 1, time)
            db.execute(sql)
        sql = "select * from file_line where filename='{}'".format(text_name)
        res = db.query(sql).first()
        # 文件
        file_index = res[2]
        # 行数
        line_index = res[3]

        files = os.listdir(dir)

        text_path = dir + '/' + files[file_index]
        total_line = load_text.getLineNum(text_path)

        # [line_index, file_index, text_path] = self.setFileLine(isUp, file_index, line_index, total_line, files, dir,
        #                                                        text_path)
        # con = load_text.read2(text_path, line_index)
        # if con.strip() == "":
        #     [line_index, file_index, text_path] = self.setFileLine(isUp, file_index, line_index, total_line, files, dir,
        #                                                            text_path)
        #
        #     con = load_text.read2(text_path, line_index)

        [line_index, file_index, text_path, con] = self.getLineCon(load_text, isUp, file_index, line_index, total_line, files, dir, text_path)


        self.parent.setText(con)

        sql = "update file_line set chapter={0},line={1},`time`='{2}' where filename='{3}'".format(file_index,
                                                                                                   line_index, time,
                                                                                                   text_name)
        db.execute(sql)

    # 递归获取行内容
    def getLineCon(self, load_text, isUp, file_index, line_index, total_line, files, dir, text_path):
        [line_index, file_index, text_path] = self.setFileLine(isUp, file_index, line_index, total_line, files, dir,
                                                               text_path)
        con = load_text.read2(text_path, line_index)
        if con.strip() == "":
            [line_index, file_index, text_path, con] = self.getLineCon(load_text, isUp, file_index, line_index, total_line, files, dir,
                                                               text_path)
        return [line_index, file_index, text_path, con]


    def setLine(self, isUp, line):
        if isUp:
            line -= 1
        else:
            line += 1
        return line

    def setFile(self, isUp, file_index):
        if isUp & file_index > 1:
            file_index -= 1
        else:
            file_index += 1
        return file_index

    def setFileLine(self, isUp, file_index, line_index, total_line, files, dir, text_path):
        if isUp:
            if line_index == 1:
                line_index = total_line
                file_index -= 1
                text_path = dir + '/' + files[file_index]
            else:
                line_index -= 1
        else:
            if line_index == total_line:
                line_index = 1
                file_index += 1
                text_path = dir + '/' + files[file_index]
            else:
                line_index += 1
        return [line_index, file_index, text_path]
